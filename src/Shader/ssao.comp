#include "common.glsli"

LayoutGroupSize(SSAO);

SetBindingLayout(PerFrame, Constants, scalar)
uniform PerFrameBlock
{
    per_frame PerFrame;
};
SetBinding(Static, StructureImage) uniform texture2D StructureImage;
SetBinding(Static, OcclusionRawStorageImage) uniform writeonly restrict image2D SSAOImage;

SetBinding(Sampler, NamedSamplers) uniform sampler Samplers[Sampler_Count];

// Sample offset table
const v2 d[4] = { v2(0.1, 0.0), v2(0.0, 0.2), v2(-0.3, 0.0 ), v2(0.0, -0.4), };

// NOTE(boti): SinCos 2pi*k / 16 with k=[0,16) in a random order
// x = C, y = S
const v2 RotationSinCosTable[16] = 
{
    v2(0.382683, 0.923880),
    v2(-0.923880, 0.382683),
    v2(0.707107, -0.707107),
    v2(0.000000, -1.000000),
    v2(1.000000, 0.000000),
    v2(-0.923880, -0.382683),
    v2(0.923880, -0.382683),
    v2(-0.000000, 1.000000),
    v2(-1.000000, -0.000000),
    v2(-0.382683, 0.923880),
    v2(-0.382683, -0.923880),
    v2(0.382683, -0.923880),
    v2(0.707107, 0.707107),
    v2(-0.707107, 0.707107),
    v2(-0.707107, -0.707107),
    v2(0.923880, 0.382683),
};

void main()
{
    v2s Size = imageSize(SSAOImage);
    v2s P = v2s(gl_GlobalInvocationID.xy);

    f32 Aspect = PerFrame.RenderExtent.x / PerFrame.RenderExtent.y;
    f32 VectorScale = 2.0 * Aspect / (PerFrame.FocalLength * PerFrame.RenderExtent.x);

    // Accumulate occlusion per pixel
    if (P.x < Size.x && P.y < Size.y)
    {
        v2 SampleP = v2(P);
        v3 Structure = StructureDecode(texelFetch(StructureImage, P, 0));

        f32 Scale = VectorScale * Structure.z;
        v3 N = normalize(v3(Structure.xy, -Scale));
        Scale = 1.0 / Scale;

        v2s RotationIndex = P & v2s(3, 3);
        vec2 Rotation = RotationSinCosTable[RotationIndex.x + RotationIndex.y * 4];

        f32 Occlusion = 0.0;
        f32 Weight = 0.0;
        for (uint i = 0; i < 4; i++)
        {
            v3 v;
            v.x = d[i].x * Rotation.x - d[i].y * Rotation.y;
            v.y = d[i].x * Rotation.y + d[i].y * Rotation.x;

            v2 Depth2 = textureLod(sampler2D(StructureImage, Samplers[Sampler_LinearUnnormalized]), SampleP + v.xy * Scale, 0).zw;
            v.z = Depth2.x + Depth2.y - Structure.z;
            
            f32 NdotV = dot(N, v);
            f32 w = clamp(1.0 - PerFrame.SSAOInverseMaxDistance * NdotV, 0.0, 1.0);
            f32 c = clamp(NdotV * inversesqrt(dot(v, v)) - PerFrame.SSAOTangentTau, 0.0, 1.0);

            Occlusion += w - w * sqrt(1.0 - c*c);
            Weight += w;
        }

        f32 Result = 1.0 - Occlusion * PerFrame.SSAOIntensity / max(Weight, 0.0001);
        imageStore(SSAOImage, P, Result.xxxx);
    }
}