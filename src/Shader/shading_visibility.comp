#include "common.glsli"

LayoutGroupSize(ShadingVisibility);

SetBindingLayout(PerFrame, Constants, scalar) 
uniform PerFrameBlock
{
    per_frame PerFrame;
};

SetBinding(Static, VisibilityImage) uniform utexture2D VisibilityImage;
SetBinding(Static, OcclusionImage) uniform texture2D OcclusionImage;
SetBinding(Static, HDRMipStorageImages) uniform restrict writeonly image2D HDRTarget[];

SetBinding(Static, CascadedShadow) uniform texture2DArray CascadedShadow;
SetBinding(Static, PointShadows) uniform textureCube PointShadows[];
SetBinding(Static, BRDFLutTexture) uniform texture2D BRDFLut;

SetBinding(Sampler, NamedSamplers) uniform sampler Samplers[Sampler_Count];
SetBinding(Sampler, MaterialSamplers) uniform sampler MatSamplers[R_MaterialSamplerCount];
SetBinding(Bindless, Textures) uniform texture2D Textures[];

SetBindingLayout(Static, MipFeedbackBuffer, scalar)
coherent buffer MipFeedbackBuffer
{
    uint MipFeedbacks[];
};

struct unpacked_vertex
{
    v3 P;
    v3 N;
    v4 T;
    v2 UV;
};

unpacked_vertex UnpackVertex(vertex_buffer_r Buffer, uint Index)
{
    unpacked_vertex Result;
    Result.P = Buffer.Data[Index].P;
    Result.N = Buffer.Data[Index].N;
    Result.T = Buffer.Data[Index].T;
    Result.UV = Buffer.Data[Index].TexCoord;
    return(Result);
}

f32 Wedge(v2 A, v2 B)
{
    f32 Result = A.x*B.y - A.y*B.x;
    return(Result);
}

f32 Interpolate(v3 Bary, f32 A, f32 B, f32 C)
{
    f32 Result = Bary.x*A + Bary.y*B + Bary.z*C;
    return(Result);
}

v2 Interpolate(v3 Bary, v2 A, v2 B, v2 C)
{
    v2 Result = Bary.x*A + Bary.y*B + Bary.z*C;
    return(Result);
}

v3 Interpolate(v3 Bary, v3 A, v3 B, v3 C)
{
    v3 Result = Bary.x*A + Bary.y*B + Bary.z*C;
    return(Result);
}

void main()
{
    v2u OutputExtent = textureSize(VisibilityImage, 0);
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, OutputExtent)))
    {
        return;
    }
    
    tile_buffer_r       TileBuffer      = tile_buffer_r(PerFrame.TileBufferAddress);
    light_buffer_r      LightBuffer     = light_buffer_r(PerFrame.LightBufferAddress);
    instance_buffer_r   InstanceBuffer  = instance_buffer_r(PerFrame.InstanceBufferAddress);
    draw_buffer_r       DrawBuffer      = draw_buffer_r(PerFrame.DrawBufferAddress);

    v2s TexelID = v2s(gl_GlobalInvocationID.xy);
    uint TileIndex;
    {
        v2u TileID = gl_GlobalInvocationID.xy / v2u(R_TileSizeX, R_TileSizeY);
        TileIndex = TileID.x + TileID.y * PerFrame.TileCount.x;
    }

    v2u InstanceTriangleID = texelFetch(VisibilityImage, TexelID, 0).rg;

    v2 TexelOffset = v2(0.5);
    v2 Pixel = 2.0 * ((v2(TexelID) + TexelOffset) / v2(OutputExtent)) - v2(1.0);

    v3 Lo = v3(0.0);
    if (InstanceTriangleID.x != 0xFFFFFFFFu)
    {
        //
        // Instance/vertex fetch
        //
        instance_data Instance = InstanceBuffer.Data[InstanceTriangleID.x];
        draw_data Draw = DrawBuffer.Data[InstanceTriangleID.x];
        
        uint IndexIndex = 3 * InstanceTriangleID.y + Draw.IndexOffset;
        
        index_buffer_r IndexBuffer = index_buffer_r(PerFrame.IndexBufferAddress);
        uint Index0 = IndexBuffer.Data[IndexIndex + 0];
        uint Index1 = IndexBuffer.Data[IndexIndex + 1];
        uint Index2 = IndexBuffer.Data[IndexIndex + 2];

        vertex_buffer_r VertexBuffer = vertex_buffer_r(Instance.VertexBufferAddress);
        unpacked_vertex Vertex0 = UnpackVertex(VertexBuffer, Draw.VertexOffset + Index0);
        unpacked_vertex Vertex1 = UnpackVertex(VertexBuffer, Draw.VertexOffset + Index1);
        unpacked_vertex Vertex2 = UnpackVertex(VertexBuffer, Draw.VertexOffset + Index2);

        //
        // Barycentrics
        //
        v3 ddX;
        v3 ddY;
        v3 Barycentrics;
        {
            v4 P0 = PerFrame.ViewProjectionTransform * v4(TransformPoint(Instance.Transform, Vertex0.P), 1.0);
            v4 P1 = PerFrame.ViewProjectionTransform * v4(TransformPoint(Instance.Transform, Vertex1.P), 1.0);
            v4 P2 = PerFrame.ViewProjectionTransform * v4(TransformPoint(Instance.Transform, Vertex2.P), 1.0);
            v3 InvW = v3(1.0 / P0.w, 1.0 / P1.w, 1.0 / P2.w);
            P0 *= InvW.x;
            P1 *= InvW.y;
            P2 *= InvW.z;
            v2 P12 = P2.xy - P1.xy;
            v2 P10 = P0.xy - P1.xy;
            f32 InvDet = 1.0 / Wedge(P12, P10);

            ddX = InvDet * v3(P1.y - P2.y, P2.y - P0.y, P0.y - P1.y) * InvW;
            ddY = InvDet * v3(P2.x - P1.x, P0.x - P2.x, P1.x - P0.x) * InvW;
            f32 ddXSum = ddX.x + ddX.y + ddX.z;
            f32 ddYSum = ddY.x + ddY.y + ddY.z;

            v2 dP = Pixel - P0.xy;
            f32 InterpInvW = InvW.x + dP.x*ddXSum + dP.y*ddYSum;
            f32 InterpW = 1.0 / InterpInvW;

            Barycentrics.x = InterpW * (InvW.x + dP.x*ddX.x + dP.y*ddY.x);
            Barycentrics.y = InterpW * (dP.x*ddX.y + dP.y*ddY.y);
            Barycentrics.z = InterpW * (dP.x*ddX.z + dP.y*ddY.z);

            ddX *= 2.0 / f32(OutputExtent.x);
            ddY *= 2.0 / f32(OutputExtent.y);
            ddXSum *= 2.0 / f32(OutputExtent.x);
            ddYSum *= 2.0 / f32(OutputExtent.y);

            f32 InterpDDX = 1.0 / (InterpInvW + ddXSum);
            f32 InterpDDY = 1.0 / (InterpInvW + ddYSum);

            ddX = InterpDDX * (Barycentrics * InterpInvW + ddX) - Barycentrics;
            ddY = InterpDDY * (Barycentrics * InterpInvW + ddY) - Barycentrics;

        }

        //
        // Attribute interpolation
        //
        v3 P        = Interpolate(Barycentrics, Vertex0.P.xyz, Vertex1.P.xyz, Vertex2.P.xyz);
        v3 WorldP   = TransformPoint(Instance.Transform, P);
        P           = TransformPoint(PerFrame.ViewTransform, WorldP);

        v2 UV       = Interpolate(Barycentrics, Vertex0.UV, Vertex1.UV, Vertex2.UV);
        v2 dXdUV    = Interpolate(ddX, Vertex0.UV, Vertex1.UV, Vertex2.UV);
        v2 dYdUV    = Interpolate(ddY, Vertex0.UV, Vertex1.UV, Vertex2.UV);

        v3 TriN     = Interpolate(Barycentrics, Vertex0.N, Vertex1.N, Vertex2.N);
        TriN        = TransformDirection(PerFrame.ViewTransform, normalize(TriN * inverse(mat3(Instance.Transform))));
        v3 TriT     = Interpolate(Barycentrics, Vertex0.T.xyz, Vertex1.T.xyz, Vertex2.T.xyz);
        TriT        = TransformDirection(PerFrame.ViewTransform, normalize(TransformDirection(Instance.Transform, TriT)));
        v3 TriB     = normalize(cross(TriN, TriT)) * Vertex0.T.w;

        //
        // Material and normal fetch
        //
        f32 Height = textureGrad(sampler2D(Textures[nonuniformEXT(Instance.Material.HeightID)], MatSamplers[nonuniformEXT(Instance.Material.AlbedoSamplerID)]), UV, dXdUV, dYdUV).r;

        v3 N = UnpackSurfaceNormal01(textureGrad(sampler2D(Textures[nonuniformEXT(Instance.Material.NormalID)], MatSamplers[nonuniformEXT(Instance.Material.NormalSamplerID)]), UV, dXdUV, dYdUV).xy);
        N = TriT * N.x + TriB * N.y + TriN * N.z;

        v4 Albedo = textureGrad(sampler2D(Textures[nonuniformEXT(Instance.Material.AlbedoID)], MatSamplers[nonuniformEXT(Instance.Material.AlbedoSamplerID)]), UV, dXdUV, dYdUV);
        Albedo *= UnpackRGBA8(Instance.Material.BaseAlbedo);
        v4 MetallicRoughness = textureGrad(sampler2D(Textures[nonuniformEXT(Instance.Material.MetallicRoughnessID)], MatSamplers[nonuniformEXT(Instance.Material.MetallicRoughnessSamplerID)]), UV, dXdUV, dYdUV);
        MetallicRoughness *= UnpackRGBA8(Instance.Material.BaseMaterial);
        f32 Occlusion = textureGrad(sampler2D(Textures[nonuniformEXT(Instance.Material.OcclusionID)], MatSamplers[nonuniformEXT(Instance.Material.AlbedoSamplerID)]), UV, dXdUV, dYdUV).r;

        // Desired mip level feedback
        {
            uint MipBucket = GetMipBucketFromDerivatives(dXdUV, dYdUV);
            atomicOr(MipFeedbacks[Instance.Material.AlbedoID], MipBucket);
            atomicOr(MipFeedbacks[Instance.Material.NormalID], MipBucket);
            atomicOr(MipFeedbacks[Instance.Material.MetallicRoughnessID], MipBucket);
            atomicOr(MipFeedbacks[Instance.Material.OcclusionID], MipBucket);
            atomicOr(MipFeedbacks[Instance.Material.HeightID], MipBucket);
        }

        //
        // Shading
        //
        v3 V = normalize(-P);
        v3 F0 = mix(v3(0.04), Albedo.rgb, MetallicRoughness.b);
        v3 DiffuseBase = (1.0 - MetallicRoughness.b) * (v3(1.0) - F0) * Albedo.rgb;

        Lo += Instance.Material.Emissive;
        {
            f32 ScreenOcclusion = texelFetch(OcclusionImage, TexelID, 0).r;
            v2 EnvBRDF = textureLod(sampler2D(BRDFLut, Samplers[Sampler_LinearEdgeClamp]), v2(MetallicRoughness.g, Clamp01(dot(N, V))), 0.0).rg;
            Lo += Occlusion * ScreenOcclusion * PerFrame.Ambience * (DiffuseBase + F0 * EnvBRDF.x + EnvBRDF.y);
        }

        // Sun
        {
            v3 CascadeBlends = GetCascadeBlends(PerFrame.CascadeMinDistances, PerFrame.CascadeMaxDistances, P.z);
            // NOTE(boti): This works because orthographic projection is an affine transform
            v3 CascadeP0 = TransformPoint(PerFrame.CascadeViewProjections[0], WorldP);
            CascadeP0.xy = 0.5 * CascadeP0.xy + v2(0.5);

            f32 SunShadow = CalculateCascadedShadow(
                CascadedShadow, Samplers[Sampler_Shadow],
                CascadeP0, CascadeBlends,
                PerFrame.CascadeScales, PerFrame.CascadeOffsets);
            Lo += CalculateOutgoingLuminance(SunShadow * PerFrame.SunL, PerFrame.SunV, N, V, DiffuseBase, F0, MetallicRoughness.g);
        }
        
        // Point lights
        for (uint LightIndex = 0; LightIndex < TileBuffer.Data[TileIndex].LightCount; LightIndex++)
        {
            light Light = LightBuffer.Data[TileBuffer.Data[TileIndex].LightIndices[LightIndex]];
            v3 dP, E;
            CalculatePointLightParams(Light, P, dP, E);

            f32 Shadow = 1.0;
            if (Light.ShadowIndex != 0xFFFFFFFFu)
            {
                v3 ShadowP = TransformDirection(PerFrame.CameraTransform, -dP);
                Shadow = CalculatePointShadow(PointShadows[Light.ShadowIndex], Samplers[Sampler_Shadow], 
                                              ShadowP, 
                                              PerFrame.PointShadows[Light.ShadowIndex].Near, 
                                              PerFrame.PointShadows[Light.ShadowIndex].Far);
            }
            Lo += CalculateOutgoingLuminance(Shadow * E, normalize(dP), N, V, DiffuseBase, F0, MetallicRoughness.g);
        }

        //
        // Atmosphere
        //
        {
            f32 Atmosphere = CalculateAtmosphere(
                v2(TexelID), 
                P, 
                PerFrame.SunV,
                PerFrame.CascadeViewProjections[0] * PerFrame.CameraTransform,
                PerFrame.CascadeScales,
                PerFrame.CascadeOffsets,
                PerFrame.CascadeMaxDistances,
                CascadedShadow,
                Samplers[Sampler_Shadow]);
            Lo += AtmosphereIntensity * Atmosphere * PerFrame.SunL;
        }
    }

    Lo = NanTo0(Lo);
    imageStore(HDRTarget[0], TexelID, v4(Lo, 1.0));
}