#version 460 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D Input;
layout(set = 0, binding = 1, r11f_g11f_b10f) uniform restrict image2D Output;

// NOTE(boti): this is only used in the downsample pass
layout(push_constant) uniform PushConstants
{
    bool DoKarisAverage;
};

void main()
{
    const float R = 0.001; // NOTE(boti): filter radius
    const float Strength = 0.04;

    ivec2 InputSize = textureSize(Input, 0);
    ivec2 OutputSize = imageSize(Output);

    ivec2 P = ivec2(gl_GlobalInvocationID.xy);
    vec2 SampleP = vec2(P) / vec2(OutputSize);
    if (P.x < OutputSize.x && P.y < OutputSize.y)
    {
        vec3 a = textureLod(Input, SampleP + vec2( -R, -R), 0).rgb;
        vec3 b = textureLod(Input, SampleP + vec2(0.0, -R), 0).rgb;
        vec3 c = textureLod(Input, SampleP + vec2( +R, -R), 0).rgb;
        vec3 d = textureLod(Input, SampleP + vec2( -R, 0.0), 0).rgb;
        vec3 e = textureLod(Input, SampleP + vec2(0.0, 0.0), 0).rgb;
        vec3 f = textureLod(Input, SampleP + vec2( +R, 0.0), 0).rgb;
        vec3 g = textureLod(Input, SampleP + vec2( -R, +R), 0).rgb;
        vec3 h = textureLod(Input, SampleP + vec2(0.0, +R), 0).rgb;
        vec3 i = textureLod(Input, SampleP + vec2( +R, +R), 0).rgb;

        vec3 BlurColor = 
            e * (4.0 / 16.0) +
            (b + d + f + h) * (2.0 / 16.0) +
            (a + c + g + i) * (1.0 / 16.0);

        vec4 SrcColor = imageLoad(Output, P);
        vec4 DstColor = mix(SrcColor, vec4(BlurColor, 1.0), Strength);
        imageStore(Output, P, DstColor);
    }
}