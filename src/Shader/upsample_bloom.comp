#version 460 core

#include "common.glsli"

layout(local_size_x = UpsampleBloom_GroupSizeX, local_size_y = UpsampleBloom_GroupSizeY, local_size_z = UpsampleBloom_GroupSizeZ) in;

layout(set = 0, binding = 0) uniform sampler2D PrevMip;
layout(set = 0, binding = 1) uniform sampler2D Input;
layout(set = 0, binding = 2) uniform restrict writeonly image2D Output;

layout(set = 1, binding = 0, scalar) uniform PerFrameBlock
{
    per_frame PerFrame;
};

void main()
{
    ivec2 InputSize = textureSize(Input, 0);
    ivec2 OutputSize = imageSize(Output);

    float RX = PerFrame.BloomFilterRadius * (float(OutputSize.y) / float(OutputSize.x));
    float RY = PerFrame.BloomFilterRadius;

    ivec2 P = ivec2(gl_GlobalInvocationID.xy);
    vec2 SampleP = (vec2(P) + vec2(0.5, 0.5)) / vec2(OutputSize);
    vec3 SrcColor = textureLod(Input, SampleP, 0).rgb;
    if (P.x < OutputSize.x && P.y < OutputSize.y)
    {
        vec3 a = textureLod(PrevMip, SampleP + vec2(-RX, -RY), 0).rgb;
        vec3 b = textureLod(PrevMip, SampleP + vec2(0.0, -RY), 0).rgb;
        vec3 c = textureLod(PrevMip, SampleP + vec2(+RX, -RY), 0).rgb;
        vec3 d = textureLod(PrevMip, SampleP + vec2(-RX, 0.0), 0).rgb;
        vec3 e = textureLod(PrevMip, SampleP + vec2(0.0, 0.0), 0).rgb;
        vec3 f = textureLod(PrevMip, SampleP + vec2(+RX, 0.0), 0).rgb;
        vec3 g = textureLod(PrevMip, SampleP + vec2(-RX, +RY), 0).rgb;
        vec3 h = textureLod(PrevMip, SampleP + vec2(0.0, +RY), 0).rgb;
        vec3 i = textureLod(PrevMip, SampleP + vec2(+RX, +RY), 0).rgb;

        vec3 BlurColor = 
            e * (4.0 / 16.0) +
            (b + d + f + h) * (2.0 / 16.0) +
            (a + c + g + i) * (1.0 / 16.0);

        #if 1
        vec4 DstColor = vec4(SrcColor + BlurColor * PerFrame.BloomInternalStrength, 1.0);
        #else
        vec4 DstColor = vec4(mix(SrcColor, BlurColor, PerFrame.BloomInternalStrength), 1.0);
        #endif
        imageStore(Output, P, DstColor);
    }
}