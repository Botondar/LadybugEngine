#version 460 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D PrevMip;
layout(set = 0, binding = 1) uniform sampler2D Input;
layout(set = 0, binding = 2, r11f_g11f_b10f) uniform restrict image2D Output;

layout(push_constant) uniform PushConstants
{
    float R;
    float Strength;
};

void main()
{
    //const float R = 0.005;
    //const float Strength = 0.85;

    ivec2 InputSize = textureSize(Input, 0);
    ivec2 OutputSize = imageSize(Output);

    float RX = R * (float(OutputSize.y) / float(OutputSize.x));
    float RY = R;

    ivec2 P = ivec2(gl_GlobalInvocationID.xy);
    vec2 SampleP = (vec2(P) + vec2(0.5, 0.5)) / vec2(OutputSize);
    vec3 SrcColor = textureLod(Input, SampleP, 0).rgb;
    if (P.x < OutputSize.x && P.y < OutputSize.y)
    {
        vec3 a = textureLod(PrevMip, SampleP + vec2( -RX, -RY), 0).rgb;
        vec3 b = textureLod(PrevMip, SampleP + vec2(0.0, -RY), 0).rgb;
        vec3 c = textureLod(PrevMip, SampleP + vec2( +RX, -RY), 0).rgb;
        vec3 d = textureLod(PrevMip, SampleP + vec2( -RX, 0.0), 0).rgb;
        vec3 e = textureLod(PrevMip, SampleP + vec2(0.0, 0.0), 0).rgb;
        vec3 f = textureLod(PrevMip, SampleP + vec2( +RX, 0.0), 0).rgb;
        vec3 g = textureLod(PrevMip, SampleP + vec2( -RX, +RY), 0).rgb;
        vec3 h = textureLod(PrevMip, SampleP + vec2(0.0, +RY), 0).rgb;
        vec3 i = textureLod(PrevMip, SampleP + vec2( +RX, +RY), 0).rgb;

        vec3 BlurColor = 
            e * (4.0 / 16.0) +
            (b + d + f + h) * (2.0 / 16.0) +
            (a + c + g + i) * (1.0 / 16.0);

        vec4 DstColor = vec4(mix(SrcColor, BlurColor, Strength), 1.0);
        imageStore(Output, P, DstColor);
    }
}