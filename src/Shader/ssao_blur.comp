#version 460 core

#include "common.glsli"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D StructureBuffer;
layout(set = 0, binding = 1) uniform sampler2D OcclusionBuffer;
layout(set = 0, binding = 2, r8) uniform writeonly restrict image2D OcclusionOut;

void main()
{
    ivec2 iP = ivec2(gl_GlobalInvocationID.xy);
    vec2 P = vec2(iP);

    const float Epsilon = 1.0 / 128.0;

    vec3 Structure = StructureDecode(textureLod(StructureBuffer, P, 0));
    float Range = 1.5 * (max(abs(Structure.x), abs(Structure.y)) + Epsilon);

    vec2 Sample = vec2(0.0, 1.0);
    vec3 Occlusion = vec3(0.0, 0.0, 0.0);

    for (uint iy = 0; iy < 2; iy++)
    {
        float y = 2.0 * iy - 0.5;
        for (uint ix = 0; ix < 2; ix++)
        {
            float x = 2.0 * ix - 0.5;

            vec2 SampleP = P + vec2(x, y);
            Sample.x = textureLod(OcclusionBuffer, SampleP, 0).x;
            Occlusion.z += Sample.x;

#if 1
            vec2 Depth = textureLod(StructureBuffer, SampleP, 0).zw;
            if (abs(Depth.x + Depth.y - Structure.z) < Range)
            {
                Occlusion.xy += Sample;
            }
#endif
        }
    }

    float Result = Occlusion.y > 0.0 ? 
        Occlusion.x / Occlusion.y : 
        0.25 * Occlusion.z;
#if 0
    float rSample = textureLod(OcclusionBuffer, P, 0).x;
    Result = rSample;
#endif
    imageStore(OcclusionOut, iP, Result.xxxx);
}