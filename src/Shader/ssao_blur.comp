#version 460 core

#include "common.glsli"

LayoutGroupSize(SSAOBlur);

SetBinding(PerFrame, StructureImage) uniform texture2D StructureImage;
SetBinding(PerFrame, OcclusionRawImage) uniform texture2D OcclusionImage;
SetBinding(PerFrame, OcclusionStorageImage) uniform writeonly restrict image2D OcclusionOut;

SetBinding(Sampler, NamedSamplers) uniform sampler Samplers[Sampler_Count];

void main()
{
    ivec2 iP = ivec2(gl_GlobalInvocationID.xy);
    vec2 P = vec2(iP);

    const float Epsilon = 1.0 / 128.0;

    vec3 Structure = StructureDecode(texelFetch(StructureImage, iP, 0));
    float Range = 1.5 * (max(abs(Structure.x), abs(Structure.y)) + Epsilon);

    vec2 Sample = vec2(0.0, 1.0);
    vec3 Occlusion = vec3(0.0, 0.0, 0.0);

    for (uint iy = 0; iy < 2; iy++)
    {
        float y = 2.0 * iy;
        for (uint ix = 0; ix < 2; ix++)
        {
            float x = 2.0 * ix;

            vec2 SampleP = P + vec2(x, y);
            Sample.x = textureLod(sampler2D(OcclusionImage, Samplers[Sampler_RenderTargetUnnormalized]), SampleP, 0).x;
            Occlusion.z += Sample.x;
            vec2 Depth = textureLod(sampler2D(StructureImage, Samplers[Sampler_RenderTargetUnnormalized]), SampleP, 0).zw;
            if (abs(Depth.x + Depth.y - Structure.z) < Range)
            {
                Occlusion.xy += Sample;
            }
        }
    }

    float Result = (Occlusion.y > 0.0) ? Occlusion.x / Occlusion.y : 0.25 * Occlusion.z;
    imageStore(OcclusionOut, iP, Result.xxxx);
}