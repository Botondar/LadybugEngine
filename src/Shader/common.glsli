#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_EXT_null_initializer : require

#include "ShaderInterop.h"

#define MieBetaFactor 21e-4
// TODO(boti): Figure out some actual physical quantities that we can base this off of
#define AtmosphereIntensity 0.025

#if defined(VS)
#   define interpolant(n) layout(location = n) out
#elif defined(FS)
#   define interpolant(n) layout(location = n) in
#else
#   define interpolant(n)
#endif

//
// Common
//

// NOTE(boti): Casting to uint here to make this work with both u32 and s32
#define AsF32(U32) uintBitsToFloat(uint(U32))
#define AsU32(F32) floatBitsToUint(F32)
#define AsS32(F32) floatBitsToInt(F32)

f32 Ratio0(f32 A, f32 B)
{
    f32 Result = 0.0;
    if (B != 0.0)
    {
        Result = A / B;
    }
    return(Result);
}

f32 Ratio1(f32 A, f32 B)
{
    f32 Result = 1.0;
    if (B != 0.0)
    {
        Result = A / B;
    }
    return(Result);
}

v3 TransformPoint(m4 M, v3 P)
{
    v3 Result = fma(P.xxx, M[0].xyz, fma(P.yyy, M[1].xyz, fma(P.zzz, M[2].xyz, M[3].xyz)));
    return(Result);
}

v3 TransformDirection(m4 M, v3 V)
{
    v3 Result = fma(V.xxx, M[0].xyz, fma(V.yyy, M[1].xyz, V.z * M[2].xyz));
    return(Result);
}

v4 UnpackRGBA8(in u32 Color) 
{
    v4 Result = vec4(
        (Color          & 0xFF) / 255.0,
        ((Color >> 8)   & 0xFF) / 255.0,
        ((Color >> 16)  & 0xFF) / 255.0,
        ((Color >> 24)        ) / 255.0);
    return Result;
}

v3 UnpackSurfaceNormal01(v2 N)
{
    v3 Result;
    Result.xy = 2.0 * N - v2(1.0);
    Result.z = sqrt(1.0 - dot(Result.xy, Result.xy));
    return(Result);
}

f32 GetLuminance(in v3 Color)
{
    v3 Factors = vec3(0.212639f, 0.715169f, 0.072192f);
    f32 Result = dot(Factors, Color);
    return Result;
}

v3 SetLuminance(in v3 Color, f32 TargetLuminance)
{
    f32 CurrentLuminance = GetLuminance(Color);
    v3 Result = Color * (TargetLuminance / CurrentLuminance);
    return Result;
}

uint GetMipBucketFromDerivatives(v2 dXdUV, v2 dYdUV)
{
    uint Result;

    // TODO(boti): We should probably just switch to generating the entire mip-chain
    // (instead of skipping the 1x1), and get rid of this special case
    f32 Slope = max(dot(dXdUV, dXdUV), dot(dYdUV, dYdUV));
    if (Slope != 0.0)
    {
        f32 InverseMipBucketLog = 0.5 * log2(Slope);
        f32 ResolutionIndependentMip = clamp(ceil(-InverseMipBucketLog), 1.0, 31.0);
        Result = 1u << uint(ResolutionIndependentMip);
    }
    else
    {
        Result = 2;
    }

    return(Result);
}

v3 ApplyFog(in v3 Li, v3 Ambience, f32 Density, f32 Distance)
{
    const f32 BetaM0 = 21e-4;
    f32 FogFactor = exp(-Density * BetaM0 * Distance);
    v3 Lo = Li * FogFactor + (1.0 - FogFactor) * Ambience;
    return(Lo);
}

v3 NanTo0(v3 V)
{
    v3 Result;
    Result.x = isnan(V.x) ? 0.0 : V.x;
    Result.y = isnan(V.y) ? 0.0 : V.y;
    Result.z = isnan(V.z) ? 0.0 : V.z;
    return(Result);
}

//
// Random
//
uint HashPCG(uint In)
{
    uint State = In * 747796405u + 2891336453u;
    uint Word = ((State >> ((State >> 28u) + 4u)) ^ State) * 277803737u;
    uint Result = (Word >> 22u) ^ Word;
    return(Result);
}

f32 U32ToF32Norm(uint U32)
{
    f32 Result = AsF32(0x3F800000 | (U32 & 0xFFFFFFu)) - 1.0;
    return(Result);
}

//
// PBR shading functions
//

void CalculatePointLightParams(light Light, v3 P, out v3 dP, out v3 E)
{
    dP = Light.P - P;
    f32 DistSq = dot(dP, dP);
    f32 InvDistSq = 1.0 / DistSq;
    E = Light.E * InvDistSq;

    // NOTE(boti): When there are a lot of light sources close together,
    // their cumulative effect can be seen on quite far away texels from the source,
    // which produces "blocky" artefacts when only certain portions of a screen tile
    // pass the binning check.
    // To counteract this, we set the luminance of those lights to 0,
    // but a better way in the future would probably be to have an attenuation
    // that actually falls to 0.
    if (GetLuminance(E) < R_LuminanceThreshold)
    {
        E = v3(0.0);
    }
}

vec3 FresnelSchlick(in vec3 F0, in float CosTheta)
{
    vec3 Result = F0 + (vec3(1.0) - F0) * exp2((-5.55473 * CosTheta - 6.98316) * CosTheta);
    return Result;
}

float DistributionGGX(in float Roughness, in float NdotH)
{
    float Alpha = Roughness*Roughness;
    float Alpha2 = Alpha*Alpha;

    float a = NdotH*NdotH * (Alpha2 - 1.0) + 1.0;
    float Result = Alpha2 / max(PI * a * a, 1e-4);
    return Result;
}

float GeometryGGX(in float Roughness, in float NdotV, in float NdotL)
{
    float k = (Roughness + 1.0);
    k *= k;
    k *= (1.0 / 8.0);

    float G1 = abs(NdotV) / (abs(NdotV)*(1.0 - k) + k);
    float G2 = abs(NdotL) / (abs(NdotL)*(1.0 - k) + k);
    float Result = G1*G2;
    return Result;
}

f32 GeometrySmithPart(f32 a2, f32 Ndot, f32 Hdot)
{
    f32 Result = 2.0 * abs(Ndot) * Hdot / (abs(Ndot) + sqrt(a2 + (1.0 - a2) * Ndot*Ndot));
    return(Result);
}

f32 GeometrySmith(f32 Roughness, f32 NdotL, f32 HdotL, f32 NdotV, f32 HdotV)
{
    f32 a = Roughness*Roughness;
    f32 a2 = a*a;
    f32 Result = GeometrySmithPart(a2, NdotL, HdotL) * GeometrySmithPart(a2, NdotV, HdotV);
    return(Result);
}

// NOTE(boti): Albedo must be weighted by (1 - Metallic) factor!
v3 CalculateOutgoingLuminance(v3 Li, v3 L, v3 N, v3 V, 
                              v3 Albedo, in v3 F0, f32 Roughness)
{
    // TODO(boti): N.V is independent of the light source, should we just precalculate and pass it in?
    float NdotV = dot(N, V);
    float NdotL = dot(L, N);
    vec3 Diffuse = Albedo;

    vec3 H = normalize(L + V);
    float VdotH = max(dot(V, H), 0.0);
    vec3 Fresnel = FresnelSchlick(F0, VdotH);

    float NdotH = max(dot(N, H), 0.0);
    float Distribution = DistributionGGX(Roughness, NdotH);
    f32 Geometry = GeometrySmith(Roughness, NdotL, max(dot(H, L), 0.0), NdotV, max(dot(H, V), 0.0));

    float SpecularDenominator = 1.0 / max(4.0 * abs(NdotV) * abs(NdotL), 1e-4);
    vec3 Specular = Distribution * Geometry * Fresnel * SpecularDenominator;
    v3 Result = (Diffuse + Specular) * max(NdotL, 0.0) * Li;
    return(Result);
}

v3 CalculateOutgoingLuminanceTransmission(
    v3 Li, v3 L, v3 N, v3 V,
    v3 Albedo, in v3 F0, f32 Roughness, f32 Transmission)
{
    // TODO(boti): N.V is independent of the light source, should we just precalculate and pass it in?
    float NdotV = dot(N, V);
    float NdotL = dot(L, N);

    vec3 Diffuse = Albedo;

    vec3 H = normalize(L + V);
    float VdotH = max(dot(V, H), 0.0);
    vec3 Fresnel = FresnelSchlick(F0, VdotH);

    float NdotH = max(dot(N, H), 0.0);
    float Distribution = DistributionGGX(Roughness, NdotH);
    f32 Geometry = GeometrySmith(
        Roughness, 
        NdotL, max(dot(H, L), 0.0), 
        NdotV, max(dot(H, V), 0.0));

    float SpecularDenominator = 1.0 / max(4.0 * abs(NdotV) * abs(NdotL), 1e-4);
    vec3 Specular = Distribution * Geometry * Fresnel * SpecularDenominator;

    v3 SpecularBTDF;
    {
        v3 Ht = normalize(V - 2.0*NdotL * N + L);

        f32 DistributionT = DistributionGGX(Roughness, max(dot(N, Ht), 0.0));
        f32 GeometryT = GeometrySmith(
            Roughness, 
            NdotL, max(dot(Ht, L), 0.0), 
            NdotV, max(dot(Ht, V), 0.0));

        Diffuse = mix(Diffuse, DistributionT * GeometryT * SpecularDenominator * Albedo, Transmission);
    }

    v3 Result = (Diffuse + Specular) * abs(NdotL) * Li;
    return(Result);
}


//
// Shadow helpers
//

vec3 GetCascadeBlends(in float Nd[4], in float Fd[4], in f32 Z)
{
    vec3 Result;
    Result.x = (Z - Nd[1]) / (Fd[0] - Nd[1]);
    Result.y = (Z - Nd[2]) / (Fd[1] - Nd[2]);
    Result.z = (Z - Nd[3]) / (Fd[2] - Nd[3]);
    return Result;
}

float SampleShadowPoisson(
    texture2DArray Texture, 
    sampler Sampler, 
    v4 P, 
    float Scale,
    uint TapCount)
{
    float Result = 0.0;

    const v2 Offsets[64] = 
    {
        v2(-0.5119625000, -0.4827938),
        v2(-0.2171264000, -0.4768726),
        v2(-0.7552931000, -0.2426507),
        v2(-0.7136765000, -0.4496614),
        v2(-0.5938849000, -0.6895654),
        v2(-0.3148003000, -0.7047654),
        v2(-0.4221500000, -0.2024607),
        v2(-0.9466816000, -0.2014508),
        v2(-0.8409063000, -0.03465778),
        v2(-0.6517572000, -0.07476326),
        v2(-0.1041822000, -0.02521214),
        v2(-0.3042712000, -0.02195431),
        v2(-0.5082307000, +0.1079806),
        v2(-0.0842987700, -0.2316298),
        v2(-0.9879128000, +0.1113683),
        v2(-0.3859636000, +0.3363545),
        v2(-0.1925334000, +0.1787288),
        v2(+0.0032561820, +0.138135),
        v2(-0.8706837000, +0.3010679),
        v2(-0.6982038000, +0.1904326),
        v2(+0.1975043000, +0.2221317),
        v2(+0.1507788000, +0.4204168),
        v2(+0.3514056000, +0.09865579),
        v2(+0.1558783000, -0.08460935),
        v2(-0.0684978000, +0.4461993),
        v2(+0.3780522000, +0.3478679),
        v2(+0.3956799000, -0.1469177),
        v2(+0.5838975000, +0.1054943),
        v2(+0.6155105000, +0.3245716),
        v2(+0.3928624000, -0.4417621),
        v2(+0.1749884000, -0.4202175),
        v2(+0.6813727000, -0.2424808),
        v2(-0.6707711000, +0.4912741),
        v2(+0.0005130528, -0.8058334),
        v2(+0.0270301300, -0.6010728),
        v2(-0.1658188000, -0.9695674),
        v2(+0.4060591000, -0.7100726),
        v2(+0.7713396000, -0.4713659),
        v2(+0.5732120000, -0.5154400),
        v2(-0.3448896000, -0.9046497),
        v2(+0.1268544000, -0.9874692),
        v2(+0.7418533000, -0.6667366),
        v2(+0.3492522000, +0.5924662),
        v2(+0.5679897000, +0.5343465),
        v2(+0.5663417000, +0.7708698),
        v2(+0.7375497000, +0.6691415),
        v2(+0.2271994000, -0.6163502),
        v2(+0.2312844000, +0.8725659),
        v2(+0.4216993000, +0.9002838),
        v2(+0.4262091000, -0.9013284),
        v2(+0.2001408000, -0.808381),
        v2(+0.1493940000, +0.6650763),
        v2(-0.0964037600, +0.9843736),
        v2(+0.7682328000, -0.07273844),
        v2(+0.0414658400, +0.8313184),
        v2(+0.9705266000, -0.1143304),
        v2(+0.9670017000, +0.1293385),
        v2(+0.9015037000, -0.3306949),
        v2(-0.5085648000, +0.7534177),
        v2(+0.9055501000, +0.3758393),
        v2(+0.7599946000, +0.1809109),
        v2(-0.2483695000, +0.7942952),
        v2(-0.4241052000, +0.5581087),
        v2(-0.1020106000, +0.6724468),
    };

    for (uint Tap = 0; Tap < TapCount; Tap++)
    {
        v2 Offset = Scale * Offsets[Tap];
        Result += texture(sampler2DArrayShadow(Texture, Sampler), P + v4(Offset, 0.0, 0.0));
    }

    Result *= 1.0 / float(TapCount);
    return(Result);
}

float SampleShadowJitter4(sampler2DArrayShadow Sampler, v4 P, v2 Jitter)
{
    float Result = 0.0;

    v2 Offsets[4] = 
    {
        v2(-Jitter.x, -Jitter.y),
        v2(+Jitter.y, -Jitter.x),
        v2(+Jitter.x, +Jitter.y),
        v2(-Jitter.y, +Jitter.x),
    };

    for (uint Tap = 0; Tap < 4; Tap++)
    {
        Result += texture(Sampler, P + v4(Offsets[Tap], 0.0, 0.0));
    }

    Result *= 0.25;
    return Result;
}

f32 CalculateCascadedShadow(
    texture2DArray Cascades, sampler Sampler, 
    v3 CascadeCoord0, v3 CascadeBlends,
    v3 CascadeScales[3], v3 CascadeOffsets[3])
{
    v3 CascadeCoord1 = CascadeScales[0] * CascadeCoord0 + CascadeOffsets[0];
    v3 CascadeCoord2 = CascadeScales[1] * CascadeCoord0 + CascadeOffsets[1];
    v3 CascadeCoord3 = CascadeScales[2] * CascadeCoord0 + CascadeOffsets[2];

    vec2 ShadowMapSize = v2(textureSize(Cascades, 0).xy);
    v2 TexelSize = 1.0 / ShadowMapSize;

    bool BeyondCascade2 = (CascadeBlends.y >= 0.0);
    bool BeyondCascade3 = (CascadeBlends.z >= 0.0);

    v2 ShadowP1 = (BeyondCascade2) ? CascadeCoord2.xy : CascadeCoord0.xy;
    v2 ShadowP2 = (BeyondCascade3) ? CascadeCoord3.xy : CascadeCoord1.xy;
    f32 Depth1 = (BeyondCascade2) ? CascadeCoord2.z : CascadeCoord0.z;
    f32 Depth2 = (BeyondCascade3) ? clamp(CascadeCoord3.z, 0.0, 1.0) : CascadeCoord1.z;

    v3 Blends = clamp(CascadeBlends, v3(0.0), v3(1.0));
    f32 Blend = (BeyondCascade2) ? Blends.y - Blends.z : 1.0 - Blends.x;

    v4 P1 = v4(ShadowP1.xy, 2.0 * f32(BeyondCascade2),       Depth1);
    v4 P2 = v4(ShadowP2.xy, 2.0 * f32(BeyondCascade3) + 1.0, Depth2);

    f32 Shadow1 = 0.0;
    f32 Shadow2 = 0.0;

#if 1
    f32 Scale = 4.0 * TexelSize.x;
    Shadow1 = SampleShadowPoisson(Cascades, Sampler, P1, Scale, 32);
    Shadow2 = SampleShadowPoisson(Cascades, Sampler, P2, Scale, 32);
#else
    v2 Jitter = v2(1.0 * (3.0/16.0), 3.0 * (3.0 / 16.0)) * TexelSize.x;
    Shadow1 = SampleShadowJitter4(Cascades, Sampler, P1, Jitter);
    Shadow2 = SampleShadowJitter4(Cascades, Sampler, P2, Jitter);
#endif

    float Result = mix(Shadow2, Shadow1, Blend);
    return(Result);
}

f32 CalculatePointShadow(textureCube ShadowMap, sampler Sampler, v3 P, f32 n, f32 f)
{
    v3 AbsP = abs(P);
    f32 MaxXY = max(AbsP.x, AbsP.y);
    f32 Depth = max(MaxXY, AbsP.z);

    v2s ShadowResolution = textureSize(ShadowMap, 0);
    f32 TexelSize = 1.0 / f32(ShadowResolution.x);
    f32 Offset = 2.0 * TexelSize;

    f32 r = 1.0 / (f - n);
    f32 ProjDepth = f*r - f*n*r / Depth;
    f32 Shadow = texture(samplerCubeShadow(ShadowMap, Sampler), v4(P, ProjDepth));

    f32 dXY = (MaxXY > AbsP.z) ? Offset : 0.0;
    f32 dX = (AbsP.x > AbsP.y) ? dXY : 0.0;
    v2 OffsetXY = v2(Offset - dX, dX);
    v2 OffsetYZ = v2(Offset - dXY, dXY);

    // TODO(boti): Something's wrong here, we're getting seams
    // at the edge of the cube faces
    v3 Limit = v3(Depth);
    Limit.xy -= OffsetXY * (1.0 / 512.0);
    Limit.yz -= OffsetYZ * (1.0 / 512.0);

    P.xy -= OffsetXY;
    P.yz -= OffsetYZ;
    Shadow += texture(samplerCubeShadow(ShadowMap, Sampler), v4(clamp(P, -Limit, +Limit), ProjDepth));
    P.xy += 2.0 * OffsetXY;
    Shadow += texture(samplerCubeShadow(ShadowMap, Sampler), v4(clamp(P, -Limit, +Limit), ProjDepth));
    P.yz += 2.0 * OffsetYZ;
    Shadow += texture(samplerCubeShadow(ShadowMap, Sampler), v4(clamp(P, -Limit, +Limit), ProjDepth));
    P.xy -= 2.0 * OffsetXY;
    Shadow += texture(samplerCubeShadow(ShadowMap, Sampler), v4(clamp(P, -Limit, +Limit), ProjDepth));
    Shadow = 0.2 * Shadow;

    // TODO(boti): This is still here as a reminder, but really it's just dead code
#if 0
    // NOTE(boti): This is the code path for volumetric point lights
    float MaxDistance = 6.0;
    int VolCount = 16;
    float W = MaxDistance * (1.0 / float(VolCount));
    float di = AtmosphereNoise(0.5 * gl_FragCoord.xy);
    float g = 0.76;
    float g2 = g*g;
    
    float VolLo = 0.0;
    for (int i = 0; i < VolCount; i++)
    {
        float t = MaxDistance * ((i + di) / float(VolCount));
        v3 CurrentP = -V * t;
        if (CurrentP.z >= P.z - 1e-2)
        {
            break;
        }
    
        v3 VolL = Lights[LightIndex].P.xyz - CurrentP;
        v3 VolP = TransformDirection(PerFrame.CameraTransform, -VolL);
        float VolDepth = max(max(abs(VolP.x), abs(VolP.y)), abs(VolP.z));
        VolDepth = f*r - f*n*r / VolDepth;
        float VolShadow = texture(PointShadows[ShadowIndex], v4(VolP, VolDepth));
    
        float Attenuation = clamp(1.0 / sqrt(dot(VolL, VolL)), 0.0, 1.0);
    
        VolL = normalize(VolL);
        float Phase = PhaseMie(g, g2, dot(VolL, -V));
        VolLo += 0.20 * VolShadow * Attenuation * Phase * W;
    }
    
    Lo += VolLo * Lights[LightIndex].E.xyz * Lights[LightIndex].E.w;
#endif

    return(Shadow);
}

//
// Structure buffer
//

vec3 StructureDecode(in vec4 Structure)
{
    vec3 Result = vec3(Structure.xy, Structure.z + Structure.w);
    return Result;
}

//
// Atmosphere
//

v3 CIEClearSky(v3 V, v3 Up, v3 SunV, v3 SunL, bool DoSun)
{
    v3 SkyV = dot(V, Up) >= 0.0 ? V : reflect(V, Up);
    float CosGamma = dot(V, SunV);
    float CosS = max(dot(SunV, Up), 0.0);
    float CosTheta = dot(SkyV, Up);

    float Gamma = acos(CosGamma);
    float S = acos(CosS);
    float SinGamma = sqrt(1.0 - CosGamma*CosGamma);

    float Numerator = (1.0 - exp(-0.32 / CosTheta)) * (0.91 + 10.0 * exp(-3.0 * Gamma) + 0.45 * CosGamma * CosGamma);
    float Denominator = 0.2738509 * (0.91 + 10.0 * exp(-3.0 * S) + 0.45 * CosS * CosS);

    float Luminance = Numerator / max(Denominator, 1e-4);

    float SunLuminance = GetLuminance(SunL);

    v3 SkyColor = 0.1 * SunLuminance * vec3(0.2, 0.5, 1.0);
    float SunWidth = 0.015;

    v3 Result = max(SkyColor * Luminance, vec3(0.0));

    if (DoSun)
    {
        float SunGamma = acos(dot(V, SunV));
        Result = mix(SunL, Result, clamp(abs(SunGamma) / SunWidth, 0.0, 1.0));
    }

    return Result;
}

float AtmosphereSampleDistribution(float m, float t)
{
    float Result = (1.0 - m) * t*t + m*t;
    return Result;
}

float AtmosphereNoise(vec2 P)
{
    vec3 P3 = fract(P.xyx * 0.1031);
    P3 += dot(P3, P3.yzx + vec3(33.33));
    float Result = abs(fract((P3.x + P3.y) * P3.z));
    return Result;
}

// Henyey-Greenstein phase function
// NOTE(boti): g2 is g*g
float PhaseHG(in float g, in float g2, in float CosTheta)
{
    const float OneOver4Pi = 0.07957747;

    float a = 1.0 + g2 - 2*g*CosTheta;
    float Denom = sqrt(a) * a;

#if 1
    // Integral normalized over sphere
    float Phase = OneOver4Pi * (1.0 - g2) / Denom;
#else
    // Integral normalized over angle [-1,+1]
    float Phase = 0.5 * (1.0 - g2) / Denom;
#endif
    return(Phase);
}

// Cornette-Shanks phase function
float PhaseCS(in float g, in float g2, in float CosTheta)
{
    const float OneOver4Pi = 0.07957747;

    float a = 1.0 + g2 - 2.0*g*CosTheta;
    float a3_2 = sqrt(a) * a;
    float Denom = 2.0 * (2.0 + g2) * a3_2;

    float Phase = OneOver4Pi * 3.0 * (1.0 - g2) * (1.0 + CosTheta*CosTheta) / Denom;
    return(Phase);
}

float CalculateAtmosphere(
    v2 ScreenP,
    v3 P,
    v3 SunV,
    m4 CameraToShadow,
    v3 CascadeScales[3],
    v3 CascadeOffsets[3],
    f32 CascadeMaxDistances[4],
    texture2DArray Cascades,
    sampler Sampler)
{
    const int StepCount = 16;
    const float StepDistribution = 0.25;

    //v3 EndP = P * v3(1.0, 1.0, 0.999);
    float MaxDistance = 8.0;
    v3 V = normalize(P);
    v3 EndP = MaxDistance * V;

    float CosTheta = dot(V, SunV);

    const float g = 0.35;
    const float g2 = g*g;
    float PhaseIn = PhaseCS(g, g2, CosTheta);
    float PhaseOut = 1.0 - PhaseCS(g, g2, 1.0);

    float RayleighPhase = 0.059683103 * (1.0 + CosTheta); // constant is 3 / 16pi
    const vec3 BetaR0 = vec3(3.8e-6, 13.5e-6, 33.1e-6);
    const vec3 BetaM0 = vec3(21e-4);

    float Delta = AtmosphereNoise(0.5 * ScreenP);
    float InScatter = 0.0;
    uint CascadeIndex = 0;
    float Weight = StepDistribution;
    float dW = 2.0 * (1.0 - StepDistribution) / float(StepCount);

    for (int i = 0; i < StepCount; i++)
    {
        float t = (i + Delta) / float(StepCount);
        t = AtmosphereSampleDistribution(StepDistribution, t);
        vec3 CurrentP = t * EndP;
        if (CurrentP.z >= P.z)
        {
            break;
        }

        while ((CascadeIndex < 3) && (CurrentP.z > CascadeMaxDistances[CascadeIndex]))
        {
            CascadeIndex++;
        }

        vec3 ShadowP = TransformPoint(CameraToShadow, CurrentP);
        vec4 ShadowCoord = vec4(0.5 * ShadowP.xy + vec2(0.5), float(CascadeIndex), ShadowP.z);
        if (CascadeIndex > 0)
        {
            // FIXME
            ShadowCoord.xyw = CascadeScales[CascadeIndex - 1] * ShadowCoord.xyw + CascadeOffsets[CascadeIndex - 1];
        }
        float Shadow = texture(sampler2DArrayShadow(Cascades, Sampler), ShadowCoord);

        InScatter += Weight * Shadow;
        Weight += dW;
    }

    float Norm = MaxDistance / (StepCount + 1.0);
    float Result = InScatter * PhaseIn * Norm;
    return Result;
}