#include "common.glsli"

LayoutGroupSize(Skin);

layout(buffer_reference, scalar)
readonly buffer skin
{
    m4 Joints[];
};

layout(push_constant) 
uniform PushConstants
{
    skin Skin;
    uint SrcOffset;
    uint DstOffset;
    uint Count;
};

SetBindingLayout(Static, VertexBuffer, scalar)
readonly buffer SrcVB_SSBO
{
    vertex Data[];
} SrcVB;

SetBindingLayout(Static, SkinnedVertexBuffer, scalar)
writeonly buffer DstVB_SSBO
{
    vertex Data[];
} DstVB;

void main()
{
    uint Index = gl_GlobalInvocationID.x;

    if (Index < Count)
    {
        v3 InP = SrcVB.Data[SrcOffset + Index].P;
        v3 InN = SrcVB.Data[SrcOffset + Index].N;
        v4 InT = SrcVB.Data[SrcOffset + Index].T;
        v4 Weights = SrcVB.Data[SrcOffset + Index].Weights;
        uvec4 JointIndices = uvec4(SrcVB.Data[SrcOffset + Index].Joints);

        m4 J0 = Skin.Joints[JointIndices[0]];
        m4 J1 = Skin.Joints[JointIndices[1]];
        m4 J2 = Skin.Joints[JointIndices[2]];
        m4 J3 = Skin.Joints[JointIndices[3]];

        v3 P = 
            Weights[0] * TransformPoint(J0, InP) +
            Weights[1] * TransformPoint(J1, InP) + 
            Weights[2] * TransformPoint(J2, InP) +
            Weights[3] * TransformPoint(J3, InP);

        // TODO(boti): inverse transpose
        v3 N = 
            Weights[0] * TransformDirection(J0, InN) +
            Weights[1] * TransformDirection(J1, InN) +
            Weights[2] * TransformDirection(J2, InN) +
            Weights[3] * TransformDirection(J3, InN);
        N = normalize(N);

        v3 T = 
            Weights[0] * TransformDirection(J0, InT.xyz) +
            Weights[1] * TransformDirection(J1, InT.xyz) +
            Weights[2] * TransformDirection(J2, InT.xyz) +
            Weights[3] * TransformDirection(J3, InT.xyz);
        T = normalize(T);

        DstVB.Data[DstOffset + Index].P         = P;
        DstVB.Data[DstOffset + Index].N         = N;
        DstVB.Data[DstOffset + Index].T         = vec4(T, InT.w);
        DstVB.Data[DstOffset + Index].TexCoord  = SrcVB.Data[SrcOffset + Index].TexCoord;
        DstVB.Data[DstOffset + Index].Weights   = SrcVB.Data[SrcOffset + Index].Weights;
        DstVB.Data[DstOffset + Index].Joints    = SrcVB.Data[SrcOffset + Index].Joints;
        DstVB.Data[DstOffset + Index].Color     = SrcVB.Data[SrcOffset + Index].Color;
    }
}