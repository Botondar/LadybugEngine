#version 460 core

#include "common.glsli"

LayoutGroupSize(BloomUpsample);

layout(push_constant) uniform PushConstants
{
    uint DstMipIndex;
};

SetBindingLayout(PerFrame, Constants, scalar) 
uniform PerFrameBlock
{
    per_frame PerFrame;
};

SetBinding(Static, HDRColorImage)         uniform texture2D ColorImage;
SetBinding(Static, BloomImageGeneral)     uniform texture2D BloomImage;
SetBinding(Static, BloomMipStorageImages) uniform restrict writeonly image2D BloomMips[R_MaxMipCount];

SetBinding(Sampler, NamedSamplers) uniform sampler Samplers[Sampler_Count];

void main()
{
    ivec2 OutputSize = imageSize(BloomMips[DstMipIndex]);

    float RX = PerFrame.BloomFilterRadius * (float(OutputSize.y) / float(OutputSize.x));
    float RY = PerFrame.BloomFilterRadius;

    ivec2 P = ivec2(gl_GlobalInvocationID.xy);
    vec2 SampleP = (vec2(P) + vec2(0.5, 0.5)) / vec2(OutputSize);
    vec3 SrcColor = texelFetch(ColorImage, P, int(DstMipIndex)).rgb;
    if (P.x < OutputSize.x && P.y < OutputSize.y)
    {
        uint SrcMipIndex = DstMipIndex + 1;
        vec3 a = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(-RX, -RY), SrcMipIndex).rgb;
        vec3 b = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(0.0, -RY), SrcMipIndex).rgb;
        vec3 c = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(+RX, -RY), SrcMipIndex).rgb;
        vec3 d = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(-RX, 0.0), SrcMipIndex).rgb;
        vec3 e = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(0.0, 0.0), SrcMipIndex).rgb;
        vec3 f = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(+RX, 0.0), SrcMipIndex).rgb;
        vec3 g = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(-RX, +RY), SrcMipIndex).rgb;
        vec3 h = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(0.0, +RY), SrcMipIndex).rgb;
        vec3 i = textureLod(sampler2D(BloomImage, Samplers[Sampler_LinearEdgeClamp]), SampleP + vec2(+RX, +RY), SrcMipIndex).rgb;

        vec3 BlurColor = 
            e * (4.0 / 16.0) +
            (b + d + f + h) * (2.0 / 16.0) +
            (a + c + g + i) * (1.0 / 16.0);

        #if 1
        vec4 DstColor = vec4(SrcColor + BlurColor * PerFrame.BloomInternalStrength, 1.0);
        #else
        vec4 DstColor = vec4(mix(SrcColor, BlurColor, PerFrame.BloomInternalStrength), 1.0);
        #endif
        imageStore(BloomMips[DstMipIndex], P, DstColor);
    }
}