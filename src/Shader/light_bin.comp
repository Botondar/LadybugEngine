#include "common.glsli"

LayoutGroupSize(LightBin);

SetBindingLayout(PerFrame, Constants, scalar)
uniform PerFrameBlock
{
    per_frame PerFrame;
};

SetBindingLayout(Static, LightBuffer, scalar)
readonly buffer LightBuffer
{
    light Lights[];
};

SetBindingLayout(Static, TileBuffer, scalar)
buffer TileBuffer
{
    screen_tile Tiles[];
};

SetBinding(Static, StructureImage) uniform texture2D StructureImage;

bool IntersectAABBSphere(v3 P, v3 HalfExtent, v3 C, float R)
{
    v3 dP = max(v3(0.0), abs(P - C) - HalfExtent);
    bool Result = dot(dP, dP) <= R*R;
    return(Result);
}

shared float MaxDepthPerWave[8];
shared float MinDepthPerWave[8];
shared uint DepthMaskPerWave[8];

shared uint LightBufferAt;

void main()
{
    uint ThreadID = gl_LocalInvocationID.x + gl_LocalInvocationID.y * gl_WorkGroupSize.x;
    if (ThreadID == 0)
    {
        LightBufferAt = 0;
    }
    if (subgroupElect())
    {
        MaxDepthPerWave[gl_SubgroupID] = 0.0;
        MinDepthPerWave[gl_SubgroupID] = 1e9;
        DepthMaskPerWave[gl_SubgroupID] = 0;
    }
    barrier();
    if (gl_GlobalInvocationID.x >= PerFrame.RenderExtent.x || gl_GlobalInvocationID.y >= PerFrame.RenderExtent.y)
    {
        return;
    }

    uint TileIndex = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x;

    v2 Depth2 = texelFetch(StructureImage, v2s(gl_GlobalInvocationID.xy), 0).zw;
    float Depth = Depth2.x + Depth2.y;

    float MaxDepth = subgroupMax(Depth);
    float MinDepth = subgroupMin(Depth);
    if (subgroupElect())
    {
        MaxDepthPerWave[gl_SubgroupID] = subgroupMax(Depth);
        MinDepthPerWave[gl_SubgroupID] = subgroupMin(Depth);
    }
    barrier();

    for (uint WaveIndex = 0; WaveIndex < gl_NumSubgroups; WaveIndex++)
    {
        MaxDepth = max(MaxDepth, MaxDepthPerWave[WaveIndex]);
        MinDepth = min(MinDepth, MinDepthPerWave[WaveIndex]);
    }

    float InvDepthRange = 1.0 / (MaxDepth - MinDepth);
    uint DepthMask = 1 << uint(floor(32.0 * clamp((Depth - MinDepth) * InvDepthRange, 0.0, 1.0)));
    DepthMask = subgroupOr(DepthMask);
    if (subgroupElect())
    {
        DepthMaskPerWave[gl_SubgroupID] = DepthMask;
    }
    barrier();

    for (uint WaveIndex = 0; WaveIndex < gl_NumSubgroups; WaveIndex++)
    {
        DepthMask |= DepthMaskPerWave[WaveIndex];
    }

    v2u uMinXY = gl_WorkGroupID.xy * v2u(R_TileSizeX, R_TileSizeY);
    v2u uMaxXY = uMinXY + v2u(R_TileSizeX, R_TileSizeY);

    v2 MinXY = 2.0 * (v2(uMinXY) / v2(PerFrame.RenderExtent)) - v2(1.0);
    v2 MaxXY = 2.0 * (v2(uMaxXY) / v2(PerFrame.RenderExtent)) - v2(1.0);

    v3 MinP, MaxP;
    {
        // NOTE(boti): This is derived as:
        // - transforming the depth into clip-space 
        // - projecting/perspective dividing it
        // - transforming the view volume tile corner points with the inverse projection
        // - unprojecting/perspective dividing again
        float MinMul = 1.0 / (1.0 / MinDepth + PerFrame.InverseProjectionTransform[2][3]);
        float MaxMul = 1.0 / (1.0 / MaxDepth + PerFrame.InverseProjectionTransform[2][3]);
        MinP = v3(
            MinMul * PerFrame.InverseProjectionTransform[0][0] * MinXY.x,
            MinMul * PerFrame.InverseProjectionTransform[1][1] * MinXY.y,
            MinMul);
        MaxP = v3(
            MaxMul * PerFrame.InverseProjectionTransform[0][0] * MaxXY.x,
            MaxMul * PerFrame.InverseProjectionTransform[1][1] * MaxXY.y,
            MaxMul);
    }

    v3 BoxP = 0.5 * (MaxP + MinP);
    v3 HalfExtent = 0.5 * (MaxP - MinP);

    uint ThreadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
    for (uint LightIndex = ThreadID; LightIndex < PerFrame.LightCount; LightIndex += ThreadCount)
    {
        v3 P = Lights[LightIndex].P.xyz;
        float L = GetLuminance(Lights[LightIndex].E);
        float R = sqrt(max(L / R_LuminanceThreshold, 0.0));
        if (IntersectAABBSphere(BoxP, HalfExtent, P, R))
        {
            float MaxZ = clamp(InvDepthRange * (P.z + R - MinDepth), 0.0, 1.0);
            float MinZ = clamp(InvDepthRange * (P.z - R - MinDepth), 0.0, 1.0);
    
            uint MaxSlice = uint(floor(32.0 * MaxZ));
            uint MinSlice = uint(floor(32.0 * MinZ));
    
            uint Mask = (0xFFFFFFFFu >> (31 - (MaxSlice - MinSlice))) << MinSlice;
            if ((DepthMask & Mask) != 0)
            {
                uint DstIndex = atomicAdd(LightBufferAt, 1);
                if (DstIndex < R_MaxLightCountPerTile)
                {
                    Tiles[TileIndex].LightIndices[DstIndex] = LightIndex;
                }
            }
        }
    }

    barrier();
    if (ThreadID == 0)
    {
        Tiles[TileIndex].LightCount = min(LightBufferAt, R_MaxLightCountPerTile);
    }
}