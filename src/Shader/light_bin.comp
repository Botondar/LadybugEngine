#version 460 core

#include "common.glsli"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0)
uniform PerFrameBlock
{
    per_frame PerFrame;
};

layout(set = 1, binding = 0, scalar)
readonly buffer LightBuffer
{
    light Lights[];
};

layout(set = 2, binding = 0, scalar)
buffer TileBuffer
{
    screen_tile Tiles[];
};

struct frustum
{
    v4 Planes[6];
};

bool IntersectFrustumSphere(in frustum Frustum, in v3 Center, in float R)
{
    v4 P = v4(Center, 1.0);
    for (uint i = 0; i < 6; i++)
    {
        if (dot(Frustum.Planes[i], P) <= -R)
        {
            return false;
        }
    }
    return true;
}

void main()
{
    // NOTE(boti): Technically we'd need a y-check here but this compute shader
    // is laid out in rows, so we don't have to do that
    if (gl_GlobalInvocationID.x < PerFrame.TileCount.x)
    {
        uint TileIndex = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * PerFrame.TileCount.x;
        float MinX = float(gl_GlobalInvocationID.x) * R_TileSizeX;
        float MinY = float(gl_GlobalInvocationID.y) * R_TileSizeY;
        float MaxX = MinX + R_TileSizeX;
        float MaxY = MinY + R_TileSizeY;
        MinX = 2.0 * (MinX / PerFrame.ScreenSize.x) - 1.0;
        MinY = 2.0 * (MinY / PerFrame.ScreenSize.y) - 1.0;
        MaxX = 2.0 * (MaxX / PerFrame.ScreenSize.x) - 1.0;
        MaxY = 2.0 * (MaxY / PerFrame.ScreenSize.y) - 1.0;

        frustum Frustum;
        Frustum.Planes[0] = v4(+1.0, 0.0, 0.0, -MinX) * PerFrame.Projection;
        Frustum.Planes[1] = v4(-1.0, 0.0, 0.0, +MaxX) * PerFrame.Projection;
        Frustum.Planes[2] = v4( 0.0, +1.0, 0.0, -MinY) * PerFrame.Projection;
        Frustum.Planes[3] = v4( 0.0, -1.0, 0.0, +MaxY) * PerFrame.Projection;
        Frustum.Planes[4] = v4( 0.0, 0.0, +1.0, 0.0) * PerFrame.Projection;
        Frustum.Planes[5] = v4( 0.0, 0.0, -1.0, 1.0) * PerFrame.Projection;

        uint LightCount = 0;
        for (uint LightIndex = 0; LightIndex < PerFrame.LightCount; LightIndex++)
        {
            v4 P = Lights[LightIndex].P;
            v4 E = Lights[LightIndex].E;
            float L = E.w * max(E.z, max(E.y, E.x));
            float R = sqrt(max(L / R_LuminanceThreshold, 0.0));
            if (IntersectFrustumSphere(Frustum, P.xyz, R))
            {
                if (LightCount < R_MaxLightCountPerTile)
                {
                    Tiles[TileIndex].LightIndices[LightCount++] = LightIndex;
                }
            }
        }
        Tiles[TileIndex].LightCount = LightCount;
    }
}