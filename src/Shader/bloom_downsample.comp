#version 460 core

#include "common.glsli"

LayoutGroupSize(BloomDownsample);

layout(push_constant) uniform PushConstants
{
    uint DstMipIndex;
};

SetBinding(PerFrame, HDRColorImageGeneral) uniform texture2D ColorImage;
SetBinding(PerFrame, HDRMipStorageImages) uniform restrict writeonly image2D Mips[R_MaxMipCount];

SetBinding(Sampler, NamedSamplers) uniform sampler Samplers[Sampler_Count];

vec3 KarisAvg(in vec3 a, in vec3 b, in vec3 c, in vec3 d)
{
    float La = GetLuminance(a);
    float Lb = GetLuminance(b);
    float Lc = GetLuminance(c);
    float Ld = GetLuminance(d);

    float Wa = 1.0 / (La + 1.0);
    float Wb = 1.0 / (Lb + 1.0);
    float Wc = 1.0 / (Lc + 1.0);
    float Wd = 1.0 / (Ld + 1.0);

    float OneOverW = 1.0 / (Wa + Wb + Wc + Wd);

    vec3 Result = (Wa * a + Wb * b + Wc * c + Wd * d) * OneOverW;
    return Result;
}

void main()
{
    uint SrcMip = DstMipIndex - 1;

    ivec2 InputSize = textureSize(ColorImage, int(SrcMip));
    ivec2 OutputSize = imageSize(Mips[DstMipIndex]);

    vec2 InputTexelSize = vec2(1.0) / InputSize;
    vec2 OutputTexelSize = vec2(1.0) / OutputSize;

    ivec2 WriteP = ivec2(gl_GlobalInvocationID.xy);
    vec2 ReadP = (vec2(WriteP) + vec2(0.5, 0.5)) * OutputTexelSize;
    if (WriteP.x < OutputSize.x && WriteP.y < OutputSize.y)
    {
        // b00  -  b10  -  b20
        //  -  a00  -  a10  -
        // b01  -  b11  -  b21
        //  -  a01  -  a11  -
        // b02  -  b12  -  b22
        vec3 a00 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(-1.0, -1.0), SrcMip).rgb;
        vec3 a10 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(+1.0, -1.0), SrcMip).rgb;
        vec3 a11 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(+1.0, +1.0), SrcMip).rgb;
        vec3 a01 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(-1.0, +1.0), SrcMip).rgb;

        vec3 b00 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(-2.0, -2.0), SrcMip).rgb;
        vec3 b10 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2( 0.0, -2.0), SrcMip).rgb;
        vec3 b20 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(+2.0, -2.0), SrcMip).rgb;
        vec3 b01 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(-2.0,  0.0), SrcMip).rgb;
        vec3 b11 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2( 0.0,  0.0), SrcMip).rgb;
        vec3 b21 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(+2.0,  0.0), SrcMip).rgb;
        vec3 b02 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(-2.0, +2.0), SrcMip).rgb;
        vec3 b12 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2( 0.0, +2.0), SrcMip).rgb;
        vec3 b22 = textureLod(sampler2D(ColorImage, Samplers[Sampler_LinearEdgeClamp]), ReadP + InputTexelSize * vec2(+2.0, +2.0), SrcMip).rgb;
        
        vec3 Accum = vec3(0.0);
        if (DstMipIndex == 1)
        {
            Accum += KarisAvg(b00, b10, b01, b11);
            Accum += KarisAvg(b10, b20, b11, b21);
            Accum += KarisAvg(b01, b11, b02, b12);
            Accum += KarisAvg(b11, b21, b12, b22);
            Accum *= 0.125;

            Accum += 0.5 * KarisAvg(a00, a10, a01, a11);
        }
        else
        {
            Accum += (b00 + b10 + b01 + b11);
            Accum += (b10 + b20 + b11 + b21);
            Accum += (b01 + b11 + b02 + b12);
            Accum += (b11 + b21 + b12 + b22);
            Accum *= 0.03125;
            Accum += 0.125 * (a00 + a10 + a01 + a11);
            
        }
        
        imageStore(Mips[DstMipIndex], WriteP, vec4(Accum, 1.0));
    }
}